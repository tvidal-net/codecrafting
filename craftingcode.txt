E.1 – TDD lifecycle & naming

Objective
- Introduce naming convention
- Create production code from test
- Start from assertion
- Tip for deciding the first test to write: The simplest possible.

Problem description: Stack

Implement a Stack class with the following public methods:

+ void push(Object object)
+ Object pop()

Stack should throw an exception if popped when empty.

---

package com.codurance.craftingcode.exercise_01_stack;

import org.junit.Before;
import org.junit.Test;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

public class StackShould {

    private static final Object SOME_OBJECT = "Some Object";
  private static final Object ANOTHER_OBJECT = "Another object";
  private Stack stack;

  @Before
  public void initialise() {
      stack = new Stack();
  }

  @Test(expected = IllegalStateException.class) public void
  throw_exception_if_popped_when_empty() {
      stack = new Stack();
      stack.pop();
  }

  @Test public void
  pop_the_last_object_pushed() {
      stack.push(SOME_OBJECT);

      assertThat(stack.pop(), is(SOME_OBJECT));
  }

  @Test public void
  pop_objects_in_the_reverse_order_they_were_pushed() {
      stack.push(SOME_OBJECT);
      stack.push(ANOTHER_OBJECT);

      assertThat(stack.pop(), is(ANOTHER_OBJECT));
      assertThat(stack.pop(), is(SOME_OBJECT));
  }

}


package com.codurance.craftingcode.exercise_01_stack;

import java.util.ArrayList;
import java.util.List;

public class Stack {
    private List<Object> objects = new ArrayList<>();

  public Object pop() {
      if (objects.isEmpty()) {
          throw new IllegalStateException();
      }
      return objects.remove(objects.size() - 1);
  }

  public void push(Object object) {
      this.objects.add(object);
  }
}

---

E.2 – Test-Driving Algorithms

Objective
- Grow an algorithm bit by bit
- Delay treating exceptions (in this case, because they are more complex)
- Intentionally cause duplication
- Focus on simple structures first

Problem description: Roman Numerals Converter

Implement a Roman numeral converter. The code must be able to take decimals up
to 3999 and convert to their roman equivalent.

Examples
1    - I
5    - V
10   - X
50   - L
100  - C
500  - D
1000 - M
2499 - MMCDXCIX
3949 - MMMCMXLIX

---

1 - ({}–>nil) no code at all->code that employs nil
2 - (nil->constant)
3 - (constant->constant+) a simple constant to a more complex constant
4 - (constant->scalar) replacing a constant with a variable or an argument
5 - (statement->statements) adding more unconditional statements.
6 - (unconditional->if) splitting the execution path
7 - (scalar->array)
8 - (array->container)
9 - (statement->recursion)
10 - (if->while)
11 - (expression->function) replacing an expression with a function or algorithm
12 - (variable->assignment) replacing the value of a variable.

---

E.3 – Expressing Business Rules

Objective
- Clearly express business rules and domain.
- It’s OK to write a passing test if it express a valid business rule.

Problem description: Leap Year

All the following rules must be satisfied:
- Is leap year if divisible by 400
- Is NOT leap year if divisible by 100 but not by 400
- Is leap year is divisible by 4

---

